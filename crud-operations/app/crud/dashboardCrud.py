from sqlalchemy.orm import join, load_only, Load
from sqlalchemy import func, text, case, distinct as distinc,extract
from azure.cosmosdb.table.tableservice import TableService
import sys,os
sys.path.append("..")
import model
from datetime import datetime
def getinvcountbyvendor(u_id,documenttype,usertype,vendor,entity,source,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
    hasvendor = False
    if vendor:
        hasvendor = True
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        else:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
    hassource = False
    if source:
        hassource = True
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
        if hasentity and hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and not hasentity:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasentity and not hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
        if hasentity and hasvendor and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and not hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and not hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if not hasvendor and hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
        if not hasvendor and hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
        if not hasvendor and not hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).limit(5).all()    
    return res

def getrejectedinvcountbyvendor(u_id,documenttype,usertype,vendor,entity,source,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
    hasvendor = False
    if vendor:
        hasvendor = True
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        else:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
    hassource = False
    if source:
        hassource = True
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasentity and hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and not hasentity:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasentity and not hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasentity and hasvendor and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and not hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if hasvendor and not hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if not hasvendor and hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if not hasvendor and hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
        if not hasvendor and not hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.documentStatusID == 10,model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('count DESC')).all()    
    return res    

def getinvcountbysource(u_id,documenttype,usertype,vendor,entity,source,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0).group_by(model.Document.sourcetype).all()    
    hasvendor = False
    if vendor:
        hasvendor = True
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor).group_by(model.Document.sourcetype).all()    
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor,model.Document.entityID == entity).group_by(model.Document.sourcetype).all()    
        else:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.entityID == entity).group_by(model.Document.sourcetype).all()    
    hassource = False
    if source:
        hassource = True
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.sourcetype == source).group_by(model.Document.sourcetype).all()    
        if hasentity and hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.sourcetype == source,model.Document.entityID == entity,model.Vendor.VendorName == vendor).group_by(model.Document.sourcetype).all()    
        if hasvendor and not hasentity:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.sourcetype == source,model.Vendor.VendorName == vendor).group_by(model.Document.sourcetype).all()    
        if hasentity and not hasvendor:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.sourcetype == source,model.Document.entityID == entity).group_by(model.Document.sourcetype).all()    
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).group_by(model.Document.sourcetype).all()    
        if hasentity and hasvendor and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,model.Document.sourcetype == source,model.Vendor.VendorName == vendor).group_by(model.Document.sourcetype).all()    
        if hasvendor and hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,model.Vendor.VendorName == vendor).group_by(model.Document.sourcetype).all()    
        if hasvendor and not hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,model.Vendor.VendorName == vendor).group_by(model.Document.sourcetype).all()    
        if hasvendor and not hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype,model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Vendor.VendorName == vendor).group_by(model.Document.sourcetype).all()    
        if not hasvendor and hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.entityID == entity,model.Document.sourcetype == source).group_by(model.Document.sourcetype).all()    
        if not hasvendor and hasentity and not hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.entityID == entity).group_by(model.Document.sourcetype).all()    
        if not hasvendor and not hasentity and hassource:
            res = db.query(func.count(model.Document.idDocument).label('count'),model.Document.sourcetype).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.documentStatusID != 0,model.Document.sourcetype == source).group_by(model.Document.sourcetype).all()    
    
    return res

def getpendinginvbyamount(u_id,documenttype,usertype,vendor,entity,source,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6])).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
    hasvendor = False
    if vendor:
        hasvendor = True
        res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6])).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
        else:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
    hassource = False
    if source:
        hassource = True
        res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
        if hasentity and hasvendor:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.sourcetype == source,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
        if hasvendor and not hasentity:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
        if hasentity and not hasvendor:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.sourcetype == source,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
        if hasentity and hasvendor and hassource:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
        if hasvendor and hasentity and not hassource:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
        if hasvendor and not hasentity and hassource:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
        if hasvendor and not hasentity and not hassource:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(model.Vendor.VendorName == vendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).all()
        if not hasvendor and hasentity and hassource:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
        if not hasvendor and hasentity and not hassource:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
        if not hasvendor and not hasentity and hassource:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.Vendor.VendorName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).group_by(model.Vendor.VendorName).order_by(text('amount DESC')).limit(5).all()
    return res

def ageingreport(u_id,documenttype,usertype,vendor,entity,source,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    hasvendor = False
    if vendor:
        hasvendor = True
        resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
        resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
        resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
        resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
    
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
        else:
            resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    
    hassource = False
    if source:
        hassource = True
        resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        if hasentity and hasvendor:
            resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
    
        if hasvendor and not hasentity:
            resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
    
        if hasentity and not hasvendor:
            resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    
        if hasentity and hasvendor and hassource:
            resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
    
        if hasvendor and hasentity and not hassource:
            resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
    
        if hasvendor and not hasentity and hassource:
            resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
    
        if hasvendor and not hasentity and not hassource:
            resles10 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Vendor.VendorName == vendor).all()    
    
        if not hasvendor and hasentity and hassource:
            resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    
        if not hasvendor and hasentity and not hassource:
            resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    
        if not hasvendor and not hasentity and hassource:
            resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
            resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == documenttype,model.Document.sourcetype == source,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    
    
    return {"0-10":resles10[0]['count'],"11-20":resles20[0]['count'],"21-30":resles30[0]['count'],">31":resgre31[0]['count']}

def getvendorsummary(u_id,documenttype,usertype,vendor,entity,source,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0).all()
    rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None)).all()   
    pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None)).all()
    errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None)).all()
    erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None)).all()
    hasvendor = False
    if vendor:
        hasvendor = True
        totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor).all()
        rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()   
        pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()
        errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()
        erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()
    
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.entityID == entity,model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.entityID == entity,model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.entityID == entity,model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity,model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor).all()
    
        else:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Document.entityID == entity).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity).all()
    
    hassource = False
    if source:
        hassource = True
        totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Document.sourcetype == source).all()
        rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Document.sourcetype == source).all()   
        pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Document.sourcetype == source).all()
        errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Document.sourcetype == source).all()
        erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Document.sourcetype == source).all()
    
        if hasentity and hasvendor:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.sourcetype == source).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.sourcetype == source).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.sourcetype == source).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.sourcetype == source).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.sourcetype == source).all()
    
        if hasvendor and not hasentity:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor,model.Document.sourcetype == source).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.sourcetype == source).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.sourcetype == source).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.sourcetype == source).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.sourcetype == source).all()
    
        if hasentity and not hasvendor:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Document.entityID == entity,model.Document.sourcetype == source).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.sourcetype == source).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.sourcetype == source).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.sourcetype == source).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.sourcetype == source).all()
    
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
        rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()   
        pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
        errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
        erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
    
        if hasentity and hasvendor and hassource:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
    
        if hasvendor and hasentity and not hassource:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
    
        if hasvendor and not hasentity and hassource:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
    
        if hasvendor and not hasentity and not hassource:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count'),model.Vendor.VendorName).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Vendor.VendorName == vendor,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
    
        if not hasvendor and hasentity and hassource:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
    
        if not hasvendor and hasentity and not hassource:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
    
        if not hasvendor and not hasentity and hassource:
            totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None), model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            rejected = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([10,11]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()   
            pending = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([1,2,3]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            errorinv = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([4,5,6]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
            erpinvoice = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([7,14]),model.Document.vendorAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.sourcetype == source).all()
    
    
    return {'totaluploaded':totaluploaded,'rejected':rejected,'pending':pending,'errorinv':errorinv,'erpinvoice':erpinvoice}

def getexceptionsummary(u_id,documenttype,usertype,date,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    totaluploaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID != 0).all()
    ocrqueue = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentsubstatusID == 29,model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None)).all()   
    batchqueue = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentsubstatusID != 29,model.Document.documentStatusID == 4,model.Document.vendorAccountID.isnot(None)).all()   
    erpqueue = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.documentStatusID.in_([5,6,7]),model.Document.vendorAccountID.isnot(None)).all()
    # documentdata = db.query(model.Document.idDocument,model.Document.documentDescription,model.Document.docheaderID, model.Document.PODocumentID, model.Document.CreatedOn, model.Document.documentDate, model.Document.totalAmount,
    #                 model.Document.documentStatusID,model.Document.sourcetype,model.Entity.EntityName,model.Vendor.VendorName,model.VendorAccount.Account, model.Document.documentsubstatusID).join(model.Entity,model.Entity.idEntity == model.Document.entityID).join(model.VendorAccount,model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype, model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None)).all()
    batchsummary = db.query(model.Document,model.VendorAccount,model.Vendor,model.Entity).options(
            Load(model.Document).load_only("idDocument","documentDescription","docheaderID","PODocumentID","CreatedOn","documentDate","documentsubstatusID","totalAmount","documentStatusID","sourcetype"),
            Load(model.VendorAccount).load_only("AccountType","Account"),
            Load(model.Vendor).load_only("VendorName"),
            Load(model.Entity).load_only("EntityName")).filter(
            model.Document.entityID.in_(sub_query)).filter(
            model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).filter(
            model.VendorAccount.vendorID == model.Vendor.idVendor).filter(
            model.Entity.idEntity == model.Document.entityID).filter(model.Document.documentStatusID != 0,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([2,4,5,6,7])).all()
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        batchsummary = db.query(model.Document,model.VendorAccount,model.Vendor,model.Entity).options(
            Load(model.Document).load_only("idDocument","documentDescription","docheaderID","PODocumentID","CreatedOn","documentDate","documentsubstatusID","totalAmount","documentStatusID","sourcetype"),
            Load(model.VendorAccount).load_only("AccountType","Account"),
            Load(model.Vendor).load_only("VendorName"),
            Load(model.Entity).load_only("EntityName")).filter(
            model.Document.entityID.in_(sub_query)).filter(
            model.Document.vendorAccountID == model.VendorAccount.idVendorAccount).filter(
            model.VendorAccount.vendorID == model.Vendor.idVendor).filter(
            model.Entity.idEntity == model.Document.entityID).filter(model.Document.documentStatusID != 0,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.vendorAccountID.isnot(None),model.Document.documentStatusID.in_([2,4,5,6,7])).all()
    return {"total":totaluploaded,"ocrqueue":ocrqueue,"batchqueue":batchqueue,"erpqueue":erpqueue,"documentdata":batchsummary}

def getpendingservbyamount(u_id,documenttype,usertype,serviceprovider,entity,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
    hasvendor = False
    if serviceprovider:
        hasvendor = True
        res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
        else:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
        if hasentity and hasvendor:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
        if hasvendor and not hasentity:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
        if not hasvendor and hasentity:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
    return res

def getprocessedservbyamount(u_id,documenttype,usertype,serviceprovider,entity,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
    hasvendor = False
    if serviceprovider:
        hasvendor = True
        res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
        else:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
        if hasentity and hasvendor:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
        if hasvendor and not hasentity:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).all()
        if not hasvendor and hasentity:
            res = db.query(func.sum(model.Document.totalAmount).label('amount'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('amount DESC')).limit(5).all()
    return res

def getoverallserv(u_id,documenttype,usertype,serviceprovider,entity,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14])).all()
    processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).all()
    hasvendor = False
    if serviceprovider:
        hasvendor = True
        downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
        processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
            processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
        else:
            downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.entityID == entity).all()
            processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity).all()
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).all()
        processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).all()
        if hasentity and hasvendor:
            downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
            processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
        if hasvendor and not hasentity:
            downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
            processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).all()
        if not hasvendor and hasentity:
            downloaded = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
            processed = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).all()
    return {'processed':processed[0]['count'],'downloaded':downloaded[0]['count']}

def getoverallservbyprovider(u_id,documenttype,usertype,serviceprovider,entity,date,db):
    # sub query to get only user accessable entities
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
    processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
    hasvendor = False
    if serviceprovider:
        hasvendor = True
        downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
        processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
    hasentity = False
    if entity:
        hasentity = True
        if hasvendor:
            downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
            processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14])).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
        else:
            downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
            processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
        processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
        if hasentity and hasvendor:
            downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
            processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
        if hasvendor and not hasentity:
            downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
            processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).filter(model.ServiceProvider.ServiceProviderName == serviceprovider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
        if not hasvendor and hasentity:
            downloaded = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([1,2,3,4,5,6,7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
            processed = db.query(func.count(model.Document.idDocument).label('count'),model.ServiceProvider.ServiceProviderName).filter(user_type_filter[usertype],model.Document.idDocumentType == documenttype,model.Document.supplierAccountID.isnot(None),model.Document.documentStatusID.in_([7,14]),model.Document.entityID == entity,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate).join(model.ServiceAccount,model.Document.supplierAccountID == model.ServiceAccount.idServiceAccount).join(model.ServiceProvider,model.ServiceAccount.serviceProviderID == model.ServiceProvider.idServiceProvider).group_by(model.ServiceProvider.ServiceProviderName).order_by(text('count DESC')).limit(5).all()
    return {'processed':processed,'downloaded':downloaded}

def getemailexceptions(date,exceptiontype):
    table_service = TableService(account_name=os.getenv('STORAGE_ACC',default="agistorage001"), account_key=os.getenv('STORAGE_KEY',default="NRsnD2OICsI043SORryjQkKqfGPeQ2f+n5whV+Wy2YxLz8PfAz6l9T2ZAcsZ28BJjBMzVhBVXEMyt3ZC5PZ7EQ=="))
    mv_reqs_resp = table_service.query_entities('EmailExceptions', filter=f"Environment eq 'ROVE HOTEL DEV'")
    hasdate = False
    if date:
        hasdate = True
        frdate = date.split("To")[0]
        todate = date.split("To")[1]
        frdate = datetime.strptime(frdate, '%Y-%m-%d')
        todate = datetime.strptime(todate, '%Y-%m-%d')
        frdate = frdate.strftime("%Y-%m-%dT00:00:00Z")
        todate = todate.strftime("%Y-%m-%dT23:59:59Z")
        mv_reqs_resp = table_service.query_entities('EmailExceptions', filter=f"Environment eq 'ROVE HOTEL DEV' and Timestamp ge datetime'{frdate}' and Timestamp le datetime'{todate}'")
    if exceptiontype:
        mv_reqs_resp = table_service.query_entities('EmailExceptions', filter=f"Environment eq 'ROVE HOTEL DEV' and Type eq '{exceptiontype}'")
        if hasdate:
            mv_reqs_resp = table_service.query_entities('EmailExceptions', filter=f"Environment eq 'ROVE HOTEL DEV' and Type eq '{exceptiontype}' and Timestamp ge datetime'{frdate}' and Timestamp le datetime'{todate}'")
    final_list = []
    for m in mv_reqs_resp:
        final_list.append({'Filename':m['Filename'],'EmailSender':m['Sender'],'Exception':m['Type'],'UploadedDate':m['UploadedDate']})
    return final_list

def getinvoicesforvendor(u_id,date,usertype,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    data = db.query(model.Document, model.Entity).filter(user_type_filter[usertype])
    documentdata = data.filter(model.Document.idDocumentType == 3, model.Document.documentStatusID != 0)
    # Fetching Document data
    Documentdata = documentdata.options(
        Load(model.Document).load_only("docheaderID", "PODocumentID", "documentDate", "totalAmount"),
        Load(model.Entity).load_only("EntityName")).join(model.Entity,model.Entity.idEntity == model.Document.entityID, isouter=True)
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        finaldata = Documentdata.filter(model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate)
    else:
        finaldata = Documentdata
    return finaldata.order_by(model.Document.CreatedOn.desc()).all()

def getageingforvendor(u_id,date,usertype,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
    resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        resles10 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=0,func.datediff(datetime.today(),model.Document.CreatedOn) <=10,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resles20 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=11,func.datediff(datetime.today(),model.Document.CreatedOn) <=20,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resles30 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=21,func.datediff(datetime.today(),model.Document.CreatedOn) <=30,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()    
        resgre31 = db.query(func.count(model.Document.idDocument).label('count')).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3,model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate,func.datediff(datetime.today(),model.Document.CreatedOn) >=31,model.Document.documentStatusID.in_([1,2,3,4,5,6])).all()
    return {"0-10":resles10[0]['count'],"11-20":resles20[0]['count'],"21-30":resles30[0]['count'],">31":resgre31[0]['count']}

def getmostordereditems(u_id,date,usertype,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    documents = db.query(model.Document.idDocument).filter(user_type_filter[usertype],model.Document.vendorAccountID.isnot(None),model.Document.idDocumentType == 3).all()
    tagids = []
    for d in documents:
        tagid = db.query(model.DocumentLineItems.lineItemtagID).filter(model.DocumentLineItems.documentID == d[0]).all()
        for t in tagid:
            taglabel = db.query(model.DocumentLineItemTags.TagName,model.DocumentLineItemTags.idDocumentLineItemTags).filter(model.DocumentLineItemTags.idDocumentLineItemTags == t[0]).first()
            if taglabel[0] == "Description":
                tagids.append(taglabel[1])
    allitems = db.query(func.count(model.DocumentLineItems.Value).label('count'),model.DocumentLineItems.Value.label('item')).filter(model.DocumentLineItems.lineItemtagID.in_(tagids)).group_by(model.DocumentLineItems.Value).limit(5).all()
    return allitems

def getprocessinginvvendor(u_id,date,usertype,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    data = db.query(model.Document, model.Entity).filter(user_type_filter[usertype])
    documentdata = data.filter(model.Document.idDocumentType == 3, model.Document.documentStatusID != 0)
    # Fetching Document data
    Documentdata = documentdata.options(
        Load(model.Document).load_only("docheaderID", "PODocumentID", "documentDate", "totalAmount"),
        Load(model.Entity).load_only("EntityName")).join(model.Entity,model.Entity.idEntity == model.Document.entityID, isouter=True)
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        finaldata = Documentdata.filter(model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate)
    else:
        finaldata = Documentdata
    return finaldata.filter(model.Document.documentStatusID.in_([1,2,3,4,5,6,7])).order_by(model.Document.CreatedOn.desc()).all()

def getInvoiced(u_id,date,usertype,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    data = db.query(model.Document, model.Entity).filter(user_type_filter[usertype])
    documentdata = data.filter(model.Document.idDocumentType == 3, model.Document.documentStatusID != 0)
    # Fetching Document data
    Documentdata = documentdata.options(
        Load(model.Document).load_only("docheaderID", "PODocumentID", "documentDate", "totalAmount"),
        Load(model.Entity).load_only("EntityName")).join(model.Entity,model.Entity.idEntity == model.Document.entityID, isouter=True)
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        finaldata = Documentdata.filter(model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate)
    else:
        finaldata = Documentdata
    return finaldata.filter(model.Document.documentStatusID.in_([14])).order_by(model.Document.CreatedOn.desc()).all()

def getCollections(u_id,date,usertype,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    data = db.query(model.Document, model.Entity).filter(user_type_filter[usertype])
    documentdata = data.filter(model.Document.idDocumentType == 3, model.Document.documentStatusID != 0)
    # Fetching Document data
    Documentdata = documentdata.options(
        Load(model.Document).load_only("docheaderID", "PODocumentID", "documentDate", "totalAmount"),
        Load(model.Entity).load_only("EntityName")).join(model.Entity,model.Entity.idEntity == model.Document.entityID, isouter=True)
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        finaldata = Documentdata.filter(model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate)
    else:
        finaldata = Documentdata
    return finaldata.filter(model.Document.documentStatusID.in_([8])).order_by(model.Document.CreatedOn.desc()).all()

def getRejected(u_id,date,usertype,db):
    if usertype == 1:
        sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    else:
        sub_query = db.query(model.VendorUserAccess.vendorAccountID).filter_by(vendorUserID=u_id).distinct()
    user_type_filter = {1: model.Document.entityID.in_(sub_query), 2: model.Document.vendorAccountID.in_(sub_query)}
    data = db.query(model.Document, model.Entity).filter(user_type_filter[usertype])
    documentdata = data.filter(model.Document.idDocumentType == 3, model.Document.documentStatusID != 0)
    # Fetching Document data
    Documentdata = documentdata.options(
        Load(model.Document).load_only("docheaderID", "PODocumentID", "documentDate", "totalAmount"),
        Load(model.Entity).load_only("EntityName")).join(model.Entity,model.Entity.idEntity == model.Document.entityID, isouter=True)
    if date:
        frdate = date.split("To")[0]+" 00:00:00"
        todate = date.split("To")[1]+" 23:59:59"
        frdate = datetime.strptime(frdate, '%Y-%m-%d %H:%M:%S')
        todate = datetime.strptime(todate, '%Y-%m-%d %H:%M:%S')
        finaldata = Documentdata.filter(model.Document.CreatedOn >= frdate,model.Document.CreatedOn <= todate)
    else:
        finaldata = Documentdata

    return finaldata.filter(model.Document.documentStatusID.in_([10,11])).order_by(model.Document.CreatedOn.desc()).all()

def getOnboardedByMonth(u_id,month,db):
    sub_query = db.query(model.UserAccess.EntityID).filter_by(UserID=u_id, isActive=1).distinct()
    data = db.query(distinc(model.DocumentModel.idVendorAccount),extract('month', model.DocumentModel.CreatedOn).label('month'),model.Vendor.VendorName,model.Entity.EntityName,model.DocumentModel.UpdatedOn).join(model.VendorAccount,model.DocumentModel.idVendorAccount == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).join(model.Entity,model.Vendor.entityID == model.Entity.idEntity).filter(model.DocumentModel.modelStatus.in_([4,5]),model.Entity.idEntity.in_(sub_query)).all()
    if month:
        data = db.query(distinc(model.DocumentModel.idVendorAccount),extract('month', model.DocumentModel.CreatedOn).label('month'),model.Vendor.VendorName,model.Entity.EntityName,model.DocumentModel.UpdatedOn).join(model.VendorAccount,model.DocumentModel.idVendorAccount == model.VendorAccount.idVendorAccount).join(model.Vendor,model.VendorAccount.vendorID == model.Vendor.idVendor).join(model.Entity,model.Vendor.entityID == model.Entity.idEntity).filter(model.DocumentModel.modelStatus.in_([4,5],model.Entity.idEntity.in_(sub_query)),extract('month', model.DocumentModel.CreatedOn) == month).all()
    return data 